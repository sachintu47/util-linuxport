diff --git a/include/ttyutils.h b/include/ttyutils.h
index e28a2b03b..c55a19bc9 100644
--- a/include/ttyutils.h
+++ b/include/ttyutils.h
@@ -48,6 +48,7 @@
 # define CDISCARD	('o' & 037)
 #endif
 
+#ifndef __MVS__
 /* Default termios->iflag */
 #ifndef TTYDEF_IFLAG
 # define TTYDEF_IFLAG	(BRKINT | ICRNL | IMAXBEL | IXON | IXANY)
@@ -208,5 +209,6 @@ static inline void reset_virtual_console(struct termios *tp, int flags)
 	tp->c_cc[VLNEXT]   = CLNEXT;
 	tp->c_cc[VEOL2]    = _POSIX_VDISABLE;
 }
+#endif //MVS
 
 #endif /* UTIL_LINUX_TTYUTILS_H */
diff --git a/lib/blkdev.c b/lib/blkdev.c
index b10da99a2..a5612fa4a 100644
--- a/lib/blkdev.c
+++ b/lib/blkdev.c
@@ -379,6 +379,7 @@ int blkdev_lock(int fd, const char *devname, const char *lockmode)
 {
 	int oper, rc, msg = 0;
 
+#ifndef __MVS__
 	if (!lockmode)
 		lockmode = getenv("LOCK_BLOCK_DEVICE");
 	if (!lockmode)
@@ -421,6 +422,7 @@ int blkdev_lock(int fd, const char *devname, const char *lockmode)
 		}
 	} else if (msg)
 		fprintf(stderr, _("OK\n"));
+#endif
 	return rc;
 }
 
diff --git a/lib/buffer.c b/lib/buffer.c
index fda2fc8aa..b6b87b1e2 100644
--- a/lib/buffer.c
+++ b/lib/buffer.c
@@ -8,6 +8,8 @@
 #include "mbsalign.h"
 #include "strutils.h"
 
+
+
 void ul_buffer_reset_data(struct ul_buffer *buf)
 {
 	if (buf->begin)
diff --git a/lib/c_strtod.c b/lib/c_strtod.c
index d25ee2774..fe4bf2beb 100644
--- a/lib/c_strtod.c
+++ b/lib/c_strtod.c
@@ -22,6 +22,10 @@
 # define USE_CLOCALE
 #endif
 
+#ifdef __MVS__
+#undef USE_CLOCALE
+#endif 
+
 #if defined(USE_CLOCALE)
 static volatile locale_t c_locale;
 
diff --git a/lib/strutils.c b/lib/strutils.c
index 6229a6e67..836256f2f 100644
--- a/lib/strutils.c
+++ b/lib/strutils.c
@@ -14,6 +14,7 @@
 #include <string.h>
 #include <strings.h>
 #include <assert.h>
+#include <sys/time.h>
 
 #include "c.h"
 #include "nls.h"
diff --git a/lib/strv.c b/lib/strv.c
index c306e3816..e003ab6a4 100644
--- a/lib/strv.c
+++ b/lib/strv.c
@@ -24,6 +24,123 @@
 #include "strutils.h"
 #include "strv.h"
 
+#ifdef __MVS__
+int vasprintf(char **strp, const char *format, va_list args) {
+    va_list args_copy;
+    va_copy(args_copy, args);
+
+    // Determine the size needed for the formatted string
+    int size = vsnprintf(NULL, 0, format, args_copy);
+
+    // Check for errors in vsnprintf
+    if (size < 0) {
+        return -1;
+    }
+
+    // Allocate memory for the formatted string
+    *strp = (char *)malloc(size + 1);
+
+    // Check for malloc failure
+    if (*strp == NULL) {
+        return -1;
+    }
+
+    // Write the formatted string to the allocated memory
+    vsprintf(*strp, format, args);
+
+    // Clean up
+    va_end(args_copy);
+
+    return size;
+}
+
+int asprintf(char **strp, const char *format, ...) {
+    va_list args;
+    va_start(args, format);
+
+    // Determine the length of the formatted string
+    int length = vsnprintf(NULL, 0, format, args);
+    va_end(args);
+
+    if (length < 0) {
+        return -1;  // Error in vsnprintf
+    }
+
+    // Allocate memory for the formatted string
+    *strp = (char *)malloc(length + 1);  // +1 for the null terminator
+    if (*strp == NULL) {
+        return -1;  // Error in memory allocation
+    }
+
+    va_start(args, format);
+    vsnprintf(*strp, length + 1, format, args);
+    va_end(args);
+
+    return length;
+}
+
+
+int dprintf(int fd, const char *format, ...) {
+    va_list args;
+    char *buffer;
+    int length, written;
+
+    // First, calculate the required length
+    va_start(args, format);
+    length = vsnprintf(NULL, 0, format, args); // Get the length of the formatted string
+    va_end(args);
+
+    if (length < 0) {
+        return -1;  // Return an error if formatting fails
+    }
+
+    buffer = (char *)malloc(length + 1);
+    if (!buffer) {
+        return -1;  // Return an error if memory allocation fails
+    }
+
+    // Format the string into the allocated buffer
+    va_start(args, format);
+    vsnprintf(buffer, length + 1, format, args);
+    va_end(args);
+
+    // Write the formatted string to the specified file descriptor
+    written = write(fd, buffer, length);
+
+    // Clean up
+    free(buffer);
+
+    // Check if the write operation was successful
+    if (written != length) {
+        return -1;  // Return an error if the write fails
+    }
+
+    return written;
+}
+
+#include <stddef.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+static void *reallocarray(void *ptr, size_t nmemb, size_t size) {
+    // Check for multiplication overflow
+    if (nmemb > 0 && SIZE_MAX / nmemb < size) {
+        // Multiplication would overflow
+        return NULL;
+    }
+
+    size_t total_size = nmemb * size;
+
+    // Check for size_t overflow
+    if (nmemb > 0 && total_size / nmemb != size) {
+        // Overflow detected
+        return NULL;
+    }
+
+    // Use realloc with the calculated total size
+    return realloc(ptr, total_size);
+}
+#endif
 void strv_clear(char **l) {
         char **k;
 
diff --git a/text-utils/hexdump.c b/text-utils/hexdump.c
index 73b3a94a0..925a12019 100644
--- a/text-utils/hexdump.c
+++ b/text-utils/hexdump.c
@@ -41,7 +41,9 @@
 #include <string.h>
 #include <stdlib.h>
 #include <errno.h>
+#ifndef __MVS__
 #include <err.h>
+#endif
 #include <limits.h>
 #include <getopt.h>
 #include "hexdump.h"
diff --git a/text-utils/ul.c b/text-utils/ul.c
index d5bca457b..6e780ff4f 100644
--- a/text-utils/ul.c
+++ b/text-utils/ul.c
@@ -49,6 +49,31 @@
 #include <errno.h>
 #include <getopt.h>
 
+#ifdef __MVS__
+#include <stddef.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+static void *reallocarray(void *ptr, size_t nmemb, size_t size) {
+    // Check for multiplication overflow
+    if (nmemb > 0 && SIZE_MAX / nmemb < size) {
+        // Multiplication would overflow
+        return NULL;
+    }
+
+    size_t total_size = nmemb * size;
+
+    // Check for size_t overflow
+    if (nmemb > 0 && total_size / nmemb != size) {
+        // Overflow detected
+        return NULL;
+    }
+
+    // Use realloc with the calculated total size
+    return realloc(ptr, total_size);
+}
+#endif
+
 #if defined(HAVE_NCURSESW_TERM_H)
 # include <ncursesw/term.h>
 #elif defined(HAVE_NCURSES_TERM_H)
