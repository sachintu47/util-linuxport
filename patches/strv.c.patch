diff --git a/lib/strv.c b/lib/strv.c
index fd84fe32a..d5d6fa07d 100644
--- a/lib/strv.c
+++ b/lib/strv.c
@@ -24,6 +24,101 @@
 #include "strutils.h"
 #include "strv.h"
 
+#ifdef __MVS__
+int vasprintf(char **strp, const char *format, va_list args) {
+    va_list args_copy;
+    va_copy(args_copy, args);
+
+    // Determine the size needed for the formatted string
+    int size = vsnprintf(NULL, 0, format, args_copy);
+
+    // Check for errors in vsnprintf
+    if (size < 0) {
+        return -1;
+    }
+
+    // Allocate memory for the formatted string
+    *strp = (char *)malloc(size + 1);
+
+    // Check for malloc failure
+    if (*strp == NULL) {
+        return -1;
+    }
+
+    // Write the formatted string to the allocated memory
+    vsprintf(*strp, format, args);
+
+    // Clean up
+    va_end(args_copy);
+
+    return size;
+}
+
+int asprintf(char **strp, const char *format, ...) {
+    va_list args;
+    va_start(args, format);
+
+    // Determine the length of the formatted string
+    int length = vsnprintf(NULL, 0, format, args);
+    va_end(args);
+
+    if (length < 0) {
+        return -1;  // Error in vsnprintf
+    }
+
+    // Allocate memory for the formatted string
+    *strp = (char *)malloc(length + 1);  // +1 for the null terminator
+    if (*strp == NULL) {
+        return -1;  // Error in memory allocation
+    }
+
+    va_start(args, format);
+    vsnprintf(*strp, length + 1, format, args);
+    va_end(args);
+
+    return length;
+}
+
+int dprintf(int fd, const char *format, ...) {
+    va_list args;
+    char *buffer;
+    int length, written;
+
+    // First, calculate the required length
+    va_start(args, format);
+    length = vsnprintf(NULL, 0, format, args); // Get the length of the formatted string
+    va_end(args);
+
+    if (length < 0) {
+        return -1;  // Return an error if formatting fails
+    }
+
+    buffer = (char *)malloc(length + 1);
+    if (!buffer) {
+        return -1;  // Return an error if memory allocation fails
+    }
+
+    // Format the string into the allocated buffer
+    va_start(args, format);
+    vsnprintf(buffer, length + 1, format, args);
+    va_end(args);
+
+    // Write the formatted string to the specified file descriptor
+    written = write(fd, buffer, length);
+
+    // Clean up
+    free(buffer);
+
+    // Check if the write operation was successful
+    if (written != length) {
+        return -1;  // Return an error if the write fails
+    }
+
+    return written;
+}
+
+#endif
+
 void strv_clear(char **l) {
         char **k;
 
