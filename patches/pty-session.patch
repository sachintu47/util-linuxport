diff --git a/include/pty-session.h b/include/pty-session.h
index af54197b3..ff12af9ae 100644
--- a/include/pty-session.h
+++ b/include/pty-session.h
@@ -16,6 +16,7 @@
 
 #include <sys/signalfd.h>
 
+#include <sys/ioctl.h>
 /*
  * Callbacks -- the first argument is always callback data, see
  * ul_pty_set_callback_data().
diff --git a/lib/pty-session.c b/lib/pty-session.c
index 815264d1a..c7b56c5ab 100644
--- a/lib/pty-session.c
+++ b/lib/pty-session.c
@@ -149,7 +149,13 @@ void ul_pty_set_mainloop_time(struct ul_pty *pty, struct timeval *tv)
 static void pty_signals_cleanup(struct ul_pty *pty)
 {
 	if (pty->sigfd != -1)
+	{
+#ifndef __MVS__
 		close(pty->sigfd);
+#else
+		signalfd_close(pty->sigfd);
+#endif
+	}
 	pty->sigfd = -1;
 
 	/* restore original setting */
@@ -182,7 +188,9 @@ int ul_pty_setup(struct ul_pty *pty)
 			attrs.c_lflag |= ECHO;
 		else
 			attrs.c_lflag &= ~ECHO;
-
+#ifdef __MVS__
+		attrs.c_oflag |= OPOST | ONLCR;
+#endif
 		ioctl(STDIN_FILENO, TIOCGWINSZ, (char *)&pty->win);
 		/* create master+slave */
 		rc = openpty(&pty->master, &pty->slave, NULL, &attrs, &pty->win);
@@ -206,6 +214,10 @@ int ul_pty_setup(struct ul_pty *pty)
 		else
 			attrs.c_lflag &= ~ECHO;
 
+#ifdef __MVS__
+		attrs.c_oflag |= OPOST | ONLCR;
+#endif
+
 		tcsetattr(pty->slave, TCSANOW, &attrs);
 	}
 
@@ -283,6 +295,7 @@ int ul_pty_chownmod_slave(struct ul_pty *pty, uid_t uid, gid_t gid, mode_t mode)
 	return 0;
 }
 
+
 /* call me in child process */
 void ul_pty_init_slave(struct ul_pty *pty)
 {
@@ -290,7 +303,9 @@ void ul_pty_init_slave(struct ul_pty *pty)
 
 	setsid();
 
+#ifndef __MVS__
 	ioctl(pty->slave, TIOCSCTTY, 1);
+#endif
 	close(pty->master);
 
 	dup2(pty->slave, STDIN_FILENO);
@@ -300,8 +315,13 @@ void ul_pty_init_slave(struct ul_pty *pty)
 	close(pty->slave);
 
 	if (pty->sigfd >= 0)
+	{
+#ifndef __MVS__
 		close(pty->sigfd);
-
+#else
+		signalfd_close(pty->sigfd);
+#endif
+	}
 	pty->slave = -1;
 	pty->master = -1;
 	pty->sigfd = -1;
@@ -314,7 +334,6 @@ void ul_pty_init_slave(struct ul_pty *pty)
 static int write_output(char *obuf, ssize_t bytes)
 {
 	DBG(IO, ul_debug(" writing output"));
-
 	if (write_all(STDOUT_FILENO, obuf, bytes)) {
 		DBG(IO, ul_debug("  writing output *failed*"));
 		return -errno;
@@ -353,6 +372,7 @@ static int schedule_child_write(struct ul_pty *pty, char *buf, size_t bufsz, int
  * The pty is usually faster than shell, so it's a good idea to wait until
  * the previous message has been already read by shell from slave before we
  * write to master. This is necessary especially for EOF situation when we can
+
  * send EOF to master before shell is fully initialized, to workaround this
  * problem we wait until slave is empty. For example:
  *
@@ -418,9 +438,13 @@ static int flush_child_buffers(struct ul_pty *pty, int *anything)
 out:
 	/* without sync write_output() will write both input &
 	 * shell output that looks like double echoing */
-	if (any)
+	if (any) {
+#ifndef __MVS__
 		fdatasync(pty->master);
-
+#else
+		fsync(pty->master);
+#endif
+	}
 	if (anything)
 		*anything = any;
 	return rc;
@@ -680,8 +704,13 @@ int ul_pty_proxy_master(struct ul_pty *pty)
 
 		/* error */
 		if (ret < 0) {
+#ifndef __MVS__
 			if (errsv == EAGAIN)
+#else
+			if (errsv == EAGAIN || errsv == EINTR)
+#endif
 				continue;
+
 			rc = -errno;
 			break;
 		}
